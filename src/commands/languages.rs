use std::process::Command;
use std::fs;
use dialoguer::Select;

pub fn create_go_project(project_name: &str) -> Result<(), Box<dyn std::error::Error>> {
    let selection = Select::new()
        .with_prompt("What type of Go template do you want to create?")
        .items(&["Minimal", "Scaffolded"])
        .default(0)
        .interact()
        .unwrap();

    match selection {

        0 => {
            let main_content = r#"
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
"#;
            fs::write(format!("{}/main.go", project_name), main_content)?;
            Command::new("go")
                .arg("mod")
                .arg("init")
                .arg(format!("github.com/USERNAME/REPO_NAME"))
                .current_dir(project_name)
                .output()?;
            fs::write(format!("{}/README.md", project_name), format!("# {project_name}\n\n## Generated by QwikBoot"))?;
            Command::new("touch")
                .arg(".gitignore")
                .current_dir(project_name)
                .output()?;
            Command::new("touch")
                .arg("go.sum")
                .current_dir(project_name)
                .output()?;
            println!("Creating Go project in {}", project_name);
            Ok(())
        }
        1 => {
            let mkdir = vec!["cmd", "internal", "pkg", "api", "script", "tests", "docs"];
            for dir in mkdir {
                fs::create_dir_all(format!("{}/{}", project_name, dir))?;
                fs::write(format!("{}/{}/README.md", project_name, dir), format!("# {dir}\n\n## Generated by QwikBoot"))?;
                fs::write(format!("{}/{}/{}.go", project_name, dir, dir), "")?;
            }
            let rm_files = vec!["cmd", "internal"];
            for rm_file in rm_files {
                Command::new("rm")
                .arg("-rf")
                .arg(format!("{}/{}.go", rm_file, rm_file))
                .current_dir(project_name)
                .output()?;
            }
            let files = vec![".gitignore", "go.sum", "README.md"];
            for file in files {
                fs::write(format!("{}/{}", project_name, file), "")?;
            }
            let internal_dirs = vec!["app", "config", "database", "routes", "services", "utils"];
            for dir in internal_dirs {
                fs::create_dir_all(format!("{}/internal/{}", project_name, dir))?;
                fs::write(format!("{}/internal/{}/README.md", project_name, dir), format!("# {dir}"))?;
                fs::write(format!("{}/internal/{}/{}.go", project_name, dir, dir), "")?;
            }
            Command::new("mkdir")
                .arg(format!("cmd/{}", project_name.to_lowercase()))
                .current_dir(project_name)
                .output()?;
            Command::new("go")
                .arg("mod")
                .arg("init")
                .arg("github.com/USERNAME/REPO_NAME")
                .current_dir(project_name)
                .output()?;

            let main_content = r#"
package main

import (
    "fmt"
    "log"
    "os"
)

func main() {
    fmt.Println("Hello, World!")
}
"#;

            fs::write(format!("{}/cmd/{}/main.go", project_name, project_name.to_lowercase()), main_content)?;
            println!("Creating Go project in {}", project_name);
            println!("To run the project:");
            println!("  cd {}/{}", project_name, project_name.to_lowercase());
            println!("  go run main.go");
            Ok(())

        }
        _ => {
            println!("Invalid selection");
            Ok(())
        }
    }
}
pub fn create_python_project(project_name: &str) -> Result<(), Box<dyn std::error::Error>> {
    Command::new("uv")
        .arg("init")
        .current_dir(project_name)
        .output()?;
    println!("Creating Python project in {}", project_name);
    Ok(())
}

pub fn create_rust_project(project_name: &str) -> Result<(), Box<dyn std::error::Error>> {
    Command::new("cargo")
        .arg("init")
        .current_dir(project_name)
        .output()?;
    println!("Creating Rust project in {}", project_name);
    Ok(())
}